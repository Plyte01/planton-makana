
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  emailVerified DateTime?
  password  String?
  image     String? // Renamed from password, as we use OAuth
  role      Role      @default(USER)
  tagline       String?   // e.g., "Full-Stack Developer & Content Creator"
  bio           String?   @db.Text // Use @db.Text for longer content
  skills        String[]  // An array of strings for skills
  socialLinks   Json?     // Store links like { "github": "url", "linkedin": "url" }
  accounts      Account[]
  sessions      Session[]
  posts     Post[]
  projects  Project[]
  resumes   Resume[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  experiences Experience[]
  testimonials Testimonial[]
  educations Education[]
}

// --- ADD THESE NEW MODELS FOR NEXTAUTH ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String? // rich text / markdown
  tags        String[]
  liveUrl     String?
  repoUrl     String?
  seoTitle    String?
  seoDesc     String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // RELATIONS
  gallery      Media[] @relation("ProjectGallery")
  coverImageId String? @unique
  coverImage   Media?  @relation("ProjectCoverImage", fields: [coverImageId], references: [id], onDelete: SetNull)
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String
  tags      String[]
  seoTitle  String?
  seoDesc   String?
  published Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  // RELATIONS
  gallery      Media[] @relation("PostGallery")
  coverImageId String? @unique
  coverImage   Media?  @relation("PostCoverImage", fields: [coverImageId], references: [id], onDelete: SetNull)
}

model Resume {
  id          String          @id @default(cuid())
  title       String
  description String?
  fileUrl     String // Cloudinary URL (PDF/DOCX)
  version     Int             @default(1)
  isDefault   Boolean         @default(false)
  isPublic    Boolean         @default(true)
  isDeleted   Boolean         @default(false)
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  templateId  String?
  template    ResumeTemplate? @relation(fields: [templateId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  mediaId   String  @unique // Each resume is one unique media file
  media     Media   @relation(fields: [mediaId], references: [id])
}

model ResumeTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  previewUrl  String? // Cloudinary preview
  resumes     Resume[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id        String    @id @default(cuid())
  url       String // Cloudinary URL
  type      MediaType
  publicId  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Resume          Resume?
  originalFilename String?

  // RELATIONS TO GALLERIES
  projectId String?
  project   Project? @relation("ProjectGallery", fields: [projectId], references: [id])
  postId    String?
  post      Post?    @relation("PostGallery", fields: [postId], references: [id])

  // RELATIONS TO COVER IMAGES (a media item can be a cover for one project or one post)
  CoverForProject Project? @relation("ProjectCoverImage")
  CoverForPost    Post?    @relation("PostCoverImage")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    MessageStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime      @updatedAt
}

enum MessageStatus {
  NEW
  READ
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  PDF
  OTHER
}


enum Role {
  ADMIN
  USER
}

model Experience {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  order       Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String?
  company   String?
  message   String
  avatarUrl String?
  order     Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  school      String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?
  order       Int      @default(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}